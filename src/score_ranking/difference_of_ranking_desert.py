import numpy as np
from itertools import combinations

# 数据
participants_scores = [
    #D.csv google sheet答案 moon-->D.csv
    ("P12", [7, 12, 3, 11, 2, 10, 9, 8, 5, 1, 13, 6, 14, 4, 15]),
    ("P13", [6, 4, 8, 3, 7, 10, 15, 5, 14, 1, 11, 9, 12, 2, 13]),
    ("P14", [6, 7, 8, 12, 5, 4, 11, 9, 2, 1, 3, 10, 14, 13, 15]),
    ("P15", [2, 3, 9, 7, 4, 8, 13, 15, 10, 1, 12, 6, 11, 5, 14]),
    ("P16", [7, 5, 4, 3, 12, 9, 10, 11, 14, 1, 15, 8, 2, 6, 13]),
    ("P17", [11, 1, 3, 10, 2, 9, 12, 15, 5, 4, 8, 7, 14, 6, 13]),
    ("P18", [12, 11, 1, 15, 6, 7, 5, 14, 13, 2, 10, 9, 3, 4, 8]),
    ("P19", [7, 11, 3, 14, 2, 5, 10, 12, 13, 1, 9, 8, 15, 4, 6]),
    ("P20", [9, 8, 5, 10, 4, 7, 12, 13, 2, 1, 11, 6, 14, 3, 15]),
    ("P21", [8, 9, 7, 15, 4, 3, 13, 10, 12, 1, 6, 2, 11, 5, 14]),
    ("P36", [9, 13, 1, 4, 6, 8, 11, 10, 7, 2, 3, 12, 15, 5, 14]),
    ("P37", [3,2,10,5,4,6,9,13,15,1,7,12,11,8,14]),
    #D.csv wechat答案 D.csv -->moon
    ("P22", [8, 4, 7, 6, 1, 3, 9, 12, 5, 2, 11, 14, 10, 13, 15]),
    ("P23", [12, 4, 9, 13, 6, 5, 15, 3, 7, 2, 14, 10, 8, 11, 1]),
    ("P24", [10, 4, 11, 6, 12, 3, 13, 7, 2, 1, 14, 8, 15, 5, 9]),
    ("P25", [7, 6, 1, 8, 2, 9, 10, 11, 13, 5, 14, 4, 15, 3, 12]),
    ("P26", [10, 9, 1, 11, 6, 7, 12, 8, 13, 2, 3, 4, 14, 5, 15]),
    ("P27", [15, 4, 13, 1, 5, 6, 8, 9, 10, 2, 12, 3, 11, 14, 7]),
    ("P28", [9, 1, 2, 13, 3, 4, 8, 11, 5, 6, 7, 10, 14, 12, 15]),
    ("P29", [13, 6, 7, 5, 2, 3, 14, 8, 4, 9, 15, 10, 1, 11, 12]),
    ("P30", [8, 7, 6, 10, 3, 5, 1, 13, 4, 2, 11, 12, 9, 15, 14]),
    ("P31", [10, 7, 5, 12, 6, 9, 8, 1, 3, 4, 2, 14, 11, 15, 13]),
    ("P32", [1, 2, 3, 10, 4, 5, 11, 12, 6, 7, 13, 14, 8, 9, 15]),
    ("P33", [8, 5, 10, 9, 6, 3, 4, 12, 2, 1, 11, 15, 14, 13, 7]),
    ("P34", [10, 9, 1, 14, 2, 5, 6, 3, 7, 4, 11, 12, 8, 13, 15]),
    ("P35", [9, 6, 1, 12, 5, 8, 11, 2, 10, 3, 7, 4, 14, 13, 15]),
]

# 将用户排名数据转化为numpy数组
scores = np.array([score for _, score in participants_scores])

# 计算所有用户对的组合
user_combinations = list(combinations(range(len(participants_scores)), 2))

# 计算每个物品在所有用户对中的排名差异
item_differences = np.zeros(scores.shape[1])

for (i, j) in user_combinations:
    item_differences += np.abs(scores[i] - scores[j])

# 将差异按从小到大排序并获取索引
ranked_items = np.argsort(item_differences)

# 输出排名结果
print("物品index按用户之间差异从小到大排序:", ranked_items)

# 将用户排名数据转化为numpy数组
scores = np.array([score for _, score in participants_scores])

# 计算每个物品的标准差
item_std_devs = np.std(scores, axis=0)

# 输出每个物品的标准差
for i, sd in enumerate(item_std_devs):
    print(f"物品 {i} 的标准差: {sd:.2f}")